# Николаю требуется проверить, возможно ли из представленных отрезков условной длины сформировать треугольник.
# Для этого он решил создать класс TriangleChecker, принимающий только положительные числа.
# С помощью метода is_triangle() возвращаются следующие значения (в зависимости от ситуации):
# – Ура, можно построить треугольник!;
# – С отрицательными числами ничего не выйдет!;
# – Нужно вводить только числа!;
# – Жаль, но из этого треугольник не сделать.
# Построить треугольник из отрезков можно лишь в одном случае: сумма длин двух любых сторон всегда больше третьей.

class TriangleChecker:
    # На хрен тут создавать класс ?)
    def is_triangle(self, num_1: int, num_2: int, num_3: int):
        if type(num_1) == int and type(num_2) == int and type(num_3) == int:
            if num_1 < 0 or num_2 < 0 or num_3 < 0:
                print("С отрицательными числами ничего не выйдет (")
            else:
                if num_1 < num_2 + num_3 and num_2 < num_1 + num_3 and num_3 < num_2 + num_1:
                    print("Ура можно построить треугольник")
                else:
                    print("Жаль но этот треугольник не сделать (")
        else:
            print("Нужно вводить только числа !")


test_1 = TriangleChecker()
test_1.is_triangle(-1, 10, 8)

test_2 = TriangleChecker()
test_2.is_triangle("10", 10, 8)

test_3 = TriangleChecker()
test_3.is_triangle(1, 10, 8)

test_4 = TriangleChecker()
test_4.is_triangle(3, 4, 5)
